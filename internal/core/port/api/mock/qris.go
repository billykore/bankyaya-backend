// Code generated by mockery v2.20.0. DO NOT EDIT.

package apimock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "go.bankyaya.org/app/backend/internal/core/entity"
)

// QRIS is an autogenerated mock type for the QRIS type
type QRIS struct {
	mock.Mock
}

type QRIS_Expecter struct {
	mock *mock.Mock
}

func (_m *QRIS) EXPECT() *QRIS_Expecter {
	return &QRIS_Expecter{mock: &_m.Mock}
}

// GetDetails provides a mock function with given fields: ctx, accountNumber, qrCode
func (_m *QRIS) GetDetails(ctx context.Context, accountNumber string, qrCode string) (*entity.QRISData, error) {
	ret := _m.Called(ctx, accountNumber, qrCode)

	var r0 *entity.QRISData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*entity.QRISData, error)); ok {
		return rf(ctx, accountNumber, qrCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.QRISData); ok {
		r0 = rf(ctx, accountNumber, qrCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.QRISData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, accountNumber, qrCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QRIS_GetDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDetails'
type QRIS_GetDetails_Call struct {
	*mock.Call
}

// GetDetails is a helper method to define mock.On call
//   - ctx context.Context
//   - accountNumber string
//   - qrCode string
func (_e *QRIS_Expecter) GetDetails(ctx interface{}, accountNumber interface{}, qrCode interface{}) *QRIS_GetDetails_Call {
	return &QRIS_GetDetails_Call{Call: _e.mock.On("GetDetails", ctx, accountNumber, qrCode)}
}

func (_c *QRIS_GetDetails_Call) Run(run func(ctx context.Context, accountNumber string, qrCode string)) *QRIS_GetDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *QRIS_GetDetails_Call) Return(_a0 *entity.QRISData, _a1 error) *QRIS_GetDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QRIS_GetDetails_Call) RunAndReturn(run func(context.Context, string, string) (*entity.QRISData, error)) *QRIS_GetDetails_Call {
	_c.Call.Return(run)
	return _c
}

// Pay provides a mock function with given fields: ctx, data
func (_m *QRIS) Pay(ctx context.Context, data *entity.QRISPaymentData) (*entity.QRISPaymentResult, error) {
	ret := _m.Called(ctx, data)

	var r0 *entity.QRISPaymentResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.QRISPaymentData) (*entity.QRISPaymentResult, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.QRISPaymentData) *entity.QRISPaymentResult); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.QRISPaymentResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.QRISPaymentData) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QRIS_Pay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pay'
type QRIS_Pay_Call struct {
	*mock.Call
}

// Pay is a helper method to define mock.On call
//   - ctx context.Context
//   - data *entity.QRISPaymentData
func (_e *QRIS_Expecter) Pay(ctx interface{}, data interface{}) *QRIS_Pay_Call {
	return &QRIS_Pay_Call{Call: _e.mock.On("Pay", ctx, data)}
}

func (_c *QRIS_Pay_Call) Run(run func(ctx context.Context, data *entity.QRISPaymentData)) *QRIS_Pay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.QRISPaymentData))
	})
	return _c
}

func (_c *QRIS_Pay_Call) Return(_a0 *entity.QRISPaymentResult, _a1 error) *QRIS_Pay_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QRIS_Pay_Call) RunAndReturn(run func(context.Context, *entity.QRISPaymentData) (*entity.QRISPaymentResult, error)) *QRIS_Pay_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewQRIS interface {
	mock.TestingT
	Cleanup(func())
}

// NewQRIS creates a new instance of QRIS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQRIS(t mockConstructorTestingTNewQRIS) *QRIS {
	mock := &QRIS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
