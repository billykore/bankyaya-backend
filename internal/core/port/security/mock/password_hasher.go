// Code generated by mockery v2.20.0. DO NOT EDIT.

package securitymock

import mock "github.com/stretchr/testify/mock"

// PasswordHasher is an autogenerated mock type for the PasswordHasher type
type PasswordHasher struct {
	mock.Mock
}

// Compare provides a mock function with given fields: password, hashed
func (_m *PasswordHasher) Compare(password string, hashed string) bool {
	ret := _m.Called(password, hashed)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(password, hashed)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Hash provides a mock function with given fields: password
func (_m *PasswordHasher) Hash(password string) (string, error) {
	ret := _m.Called(password)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPasswordHasher interface {
	mock.TestingT
	Cleanup(func())
}

// NewPasswordHasher creates a new instance of PasswordHasher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPasswordHasher(t mockConstructorTestingTNewPasswordHasher) *PasswordHasher {
	mock := &PasswordHasher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
