// Code generated by mockery v2.20.0. DO NOT EDIT.

package emailmock

import (
	context "context"

	entity "go.bankyaya.org/app/backend/internal/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// TransferReceiptMailer is an autogenerated mock type for the TransferReceiptMailer type
type TransferReceiptMailer struct {
	mock.Mock
}

type TransferReceiptMailer_Expecter struct {
	mock *mock.Mock
}

func (_m *TransferReceiptMailer) EXPECT() *TransferReceiptMailer_Expecter {
	return &TransferReceiptMailer_Expecter{mock: &_m.Mock}
}

// SendTransferReceipt provides a mock function with given fields: ctx, data
func (_m *TransferReceiptMailer) SendTransferReceipt(ctx context.Context, data *entity.TransferEmailData) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.TransferEmailData) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransferReceiptMailer_SendTransferReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTransferReceipt'
type TransferReceiptMailer_SendTransferReceipt_Call struct {
	*mock.Call
}

// SendTransferReceipt is a helper method to define mock.On call
//   - ctx context.Context
//   - data *entity.TransferEmailData
func (_e *TransferReceiptMailer_Expecter) SendTransferReceipt(ctx interface{}, data interface{}) *TransferReceiptMailer_SendTransferReceipt_Call {
	return &TransferReceiptMailer_SendTransferReceipt_Call{Call: _e.mock.On("SendTransferReceipt", ctx, data)}
}

func (_c *TransferReceiptMailer_SendTransferReceipt_Call) Run(run func(ctx context.Context, data *entity.TransferEmailData)) *TransferReceiptMailer_SendTransferReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.TransferEmailData))
	})
	return _c
}

func (_c *TransferReceiptMailer_SendTransferReceipt_Call) Return(_a0 error) *TransferReceiptMailer_SendTransferReceipt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransferReceiptMailer_SendTransferReceipt_Call) RunAndReturn(run func(context.Context, *entity.TransferEmailData) error) *TransferReceiptMailer_SendTransferReceipt_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewTransferReceiptMailer interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransferReceiptMailer creates a new instance of TransferReceiptMailer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransferReceiptMailer(t mockConstructorTestingTNewTransferReceiptMailer) *TransferReceiptMailer {
	mock := &TransferReceiptMailer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
