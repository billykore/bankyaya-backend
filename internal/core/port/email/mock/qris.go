// Code generated by mockery v2.20.0. DO NOT EDIT.

package emailmock

import (
	context "context"

	entity "go.bankyaya.org/app/backend/internal/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// QRISReceiptMailer is an autogenerated mock type for the QRISReceiptMailer type
type QRISReceiptMailer struct {
	mock.Mock
}

type QRISReceiptMailer_Expecter struct {
	mock *mock.Mock
}

func (_m *QRISReceiptMailer) EXPECT() *QRISReceiptMailer_Expecter {
	return &QRISReceiptMailer_Expecter{mock: &_m.Mock}
}

// SendQRISReceipt provides a mock function with given fields: ctx, data
func (_m *QRISReceiptMailer) SendQRISReceipt(ctx context.Context, data entity.QRISEmailData) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.QRISEmailData) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QRISReceiptMailer_SendQRISReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendQRISReceipt'
type QRISReceiptMailer_SendQRISReceipt_Call struct {
	*mock.Call
}

// SendQRISReceipt is a helper method to define mock.On call
//   - ctx context.Context
//   - data entity.QRISEmailData
func (_e *QRISReceiptMailer_Expecter) SendQRISReceipt(ctx interface{}, data interface{}) *QRISReceiptMailer_SendQRISReceipt_Call {
	return &QRISReceiptMailer_SendQRISReceipt_Call{Call: _e.mock.On("SendQRISReceipt", ctx, data)}
}

func (_c *QRISReceiptMailer_SendQRISReceipt_Call) Run(run func(ctx context.Context, data entity.QRISEmailData)) *QRISReceiptMailer_SendQRISReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.QRISEmailData))
	})
	return _c
}

func (_c *QRISReceiptMailer_SendQRISReceipt_Call) Return(_a0 error) *QRISReceiptMailer_SendQRISReceipt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QRISReceiptMailer_SendQRISReceipt_Call) RunAndReturn(run func(context.Context, entity.QRISEmailData) error) *QRISReceiptMailer_SendQRISReceipt_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewQRISReceiptMailer interface {
	mock.TestingT
	Cleanup(func())
}

// NewQRISReceiptMailer creates a new instance of QRISReceiptMailer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQRISReceiptMailer(t mockConstructorTestingTNewQRISReceiptMailer) *QRISReceiptMailer {
	mock := &QRISReceiptMailer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
