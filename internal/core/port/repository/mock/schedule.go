// Code generated by mockery v2.20.0. DO NOT EDIT.

package repomock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "go.bankyaya.org/app/backend/internal/core/entity"
)

// ScheduleRepository is an autogenerated mock type for the ScheduleRepository type
type ScheduleRepository struct {
	mock.Mock
}

type ScheduleRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ScheduleRepository) EXPECT() *ScheduleRepository_Expecter {
	return &ScheduleRepository_Expecter{mock: &_m.Mock}
}

// CreateSchedule provides a mock function with given fields: ctx, schedule
func (_m *ScheduleRepository) CreateSchedule(ctx context.Context, schedule *entity.Schedule) error {
	ret := _m.Called(ctx, schedule)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Schedule) error); ok {
		r0 = rf(ctx, schedule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScheduleRepository_CreateSchedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSchedule'
type ScheduleRepository_CreateSchedule_Call struct {
	*mock.Call
}

// CreateSchedule is a helper method to define mock.On call
//   - ctx context.Context
//   - schedule *entity.Schedule
func (_e *ScheduleRepository_Expecter) CreateSchedule(ctx interface{}, schedule interface{}) *ScheduleRepository_CreateSchedule_Call {
	return &ScheduleRepository_CreateSchedule_Call{Call: _e.mock.On("CreateSchedule", ctx, schedule)}
}

func (_c *ScheduleRepository_CreateSchedule_Call) Run(run func(ctx context.Context, schedule *entity.Schedule)) *ScheduleRepository_CreateSchedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Schedule))
	})
	return _c
}

func (_c *ScheduleRepository_CreateSchedule_Call) Return(_a0 error) *ScheduleRepository_CreateSchedule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScheduleRepository_CreateSchedule_Call) RunAndReturn(run func(context.Context, *entity.Schedule) error) *ScheduleRepository_CreateSchedule_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteScheduleByIdAndUserId provides a mock function with given fields: ctx, id, userId
func (_m *ScheduleRepository) DeleteScheduleByIdAndUserId(ctx context.Context, id int, userId int) error {
	ret := _m.Called(ctx, id, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, id, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScheduleRepository_DeleteScheduleByIdAndUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteScheduleByIdAndUserId'
type ScheduleRepository_DeleteScheduleByIdAndUserId_Call struct {
	*mock.Call
}

// DeleteScheduleByIdAndUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - userId int
func (_e *ScheduleRepository_Expecter) DeleteScheduleByIdAndUserId(ctx interface{}, id interface{}, userId interface{}) *ScheduleRepository_DeleteScheduleByIdAndUserId_Call {
	return &ScheduleRepository_DeleteScheduleByIdAndUserId_Call{Call: _e.mock.On("DeleteScheduleByIdAndUserId", ctx, id, userId)}
}

func (_c *ScheduleRepository_DeleteScheduleByIdAndUserId_Call) Run(run func(ctx context.Context, id int, userId int)) *ScheduleRepository_DeleteScheduleByIdAndUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *ScheduleRepository_DeleteScheduleByIdAndUserId_Call) Return(_a0 error) *ScheduleRepository_DeleteScheduleByIdAndUserId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ScheduleRepository_DeleteScheduleByIdAndUserId_Call) RunAndReturn(run func(context.Context, int, int) error) *ScheduleRepository_DeleteScheduleByIdAndUserId_Call {
	_c.Call.Return(run)
	return _c
}

// GetScheduleById provides a mock function with given fields: ctx, id
func (_m *ScheduleRepository) GetScheduleById(ctx context.Context, id int) (*entity.Schedule, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entity.Schedule, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.Schedule); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Schedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScheduleRepository_GetScheduleById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScheduleById'
type ScheduleRepository_GetScheduleById_Call struct {
	*mock.Call
}

// GetScheduleById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *ScheduleRepository_Expecter) GetScheduleById(ctx interface{}, id interface{}) *ScheduleRepository_GetScheduleById_Call {
	return &ScheduleRepository_GetScheduleById_Call{Call: _e.mock.On("GetScheduleById", ctx, id)}
}

func (_c *ScheduleRepository_GetScheduleById_Call) Run(run func(ctx context.Context, id int)) *ScheduleRepository_GetScheduleById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *ScheduleRepository_GetScheduleById_Call) Return(_a0 *entity.Schedule, _a1 error) *ScheduleRepository_GetScheduleById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ScheduleRepository_GetScheduleById_Call) RunAndReturn(run func(context.Context, int) (*entity.Schedule, error)) *ScheduleRepository_GetScheduleById_Call {
	_c.Call.Return(run)
	return _c
}

// GetSchedulesByUserId provides a mock function with given fields: ctx, userId
func (_m *ScheduleRepository) GetSchedulesByUserId(ctx context.Context, userId int) ([]*entity.Schedule, error) {
	ret := _m.Called(ctx, userId)

	var r0 []*entity.Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*entity.Schedule, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*entity.Schedule); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Schedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScheduleRepository_GetSchedulesByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchedulesByUserId'
type ScheduleRepository_GetSchedulesByUserId_Call struct {
	*mock.Call
}

// GetSchedulesByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int
func (_e *ScheduleRepository_Expecter) GetSchedulesByUserId(ctx interface{}, userId interface{}) *ScheduleRepository_GetSchedulesByUserId_Call {
	return &ScheduleRepository_GetSchedulesByUserId_Call{Call: _e.mock.On("GetSchedulesByUserId", ctx, userId)}
}

func (_c *ScheduleRepository_GetSchedulesByUserId_Call) Run(run func(ctx context.Context, userId int)) *ScheduleRepository_GetSchedulesByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *ScheduleRepository_GetSchedulesByUserId_Call) Return(_a0 []*entity.Schedule, _a1 error) *ScheduleRepository_GetSchedulesByUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ScheduleRepository_GetSchedulesByUserId_Call) RunAndReturn(run func(context.Context, int) ([]*entity.Schedule, error)) *ScheduleRepository_GetSchedulesByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// GetTodaySchedules provides a mock function with given fields: ctx, cronExpr
func (_m *ScheduleRepository) GetTodaySchedules(ctx context.Context, cronExpr ...string) ([]*entity.Schedule, error) {
	_va := make([]interface{}, len(cronExpr))
	for _i := range cronExpr {
		_va[_i] = cronExpr[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*entity.Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) ([]*entity.Schedule, error)); ok {
		return rf(ctx, cronExpr...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...string) []*entity.Schedule); ok {
		r0 = rf(ctx, cronExpr...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Schedule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...string) error); ok {
		r1 = rf(ctx, cronExpr...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScheduleRepository_GetTodaySchedules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTodaySchedules'
type ScheduleRepository_GetTodaySchedules_Call struct {
	*mock.Call
}

// GetTodaySchedules is a helper method to define mock.On call
//   - ctx context.Context
//   - cronExpr ...string
func (_e *ScheduleRepository_Expecter) GetTodaySchedules(ctx interface{}, cronExpr ...interface{}) *ScheduleRepository_GetTodaySchedules_Call {
	return &ScheduleRepository_GetTodaySchedules_Call{Call: _e.mock.On("GetTodaySchedules",
		append([]interface{}{ctx}, cronExpr...)...)}
}

func (_c *ScheduleRepository_GetTodaySchedules_Call) Run(run func(ctx context.Context, cronExpr ...string)) *ScheduleRepository_GetTodaySchedules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *ScheduleRepository_GetTodaySchedules_Call) Return(_a0 []*entity.Schedule, _a1 error) *ScheduleRepository_GetTodaySchedules_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ScheduleRepository_GetTodaySchedules_Call) RunAndReturn(run func(context.Context, ...string) ([]*entity.Schedule, error)) *ScheduleRepository_GetTodaySchedules_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewScheduleRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewScheduleRepository creates a new instance of ScheduleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewScheduleRepository(t mockConstructorTestingTNewScheduleRepository) *ScheduleRepository {
	mock := &ScheduleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
