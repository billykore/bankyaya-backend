// Code generated by mockery v2.20.0. DO NOT EDIT.

package otp

import mock "github.com/stretchr/testify/mock"

// MockGenerator is an autogenerated mock type for the Generator type
type MockGenerator struct {
	mock.Mock
}

type MockGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGenerator) EXPECT() *MockGenerator_Expecter {
	return &MockGenerator_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function with given fields: length
func (_m *MockGenerator) Generate(length int) (string, error) {
	ret := _m.Called(length)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (string, error)); ok {
		return rf(length)
	}
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(length)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(length)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGenerator_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MockGenerator_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - length int
func (_e *MockGenerator_Expecter) Generate(length interface{}) *MockGenerator_Generate_Call {
	return &MockGenerator_Generate_Call{Call: _e.mock.On("Generate", length)}
}

func (_c *MockGenerator_Generate_Call) Run(run func(length int)) *MockGenerator_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockGenerator_Generate_Call) Return(_a0 string, _a1 error) *MockGenerator_Generate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGenerator_Generate_Call) RunAndReturn(run func(int) (string, error)) *MockGenerator_Generate_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockGenerator interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockGenerator creates a new instance of MockGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockGenerator(t mockConstructorTestingTNewMockGenerator) *MockGenerator {
	mock := &MockGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
