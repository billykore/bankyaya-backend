// Code generated by mockery v2.53.3. DO NOT EDIT.

package otp

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockRepository) Get(ctx context.Context, id int) (*OTP, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *OTP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*OTP, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *OTP); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*OTP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockRepository_Expecter) Get(ctx interface{}, id interface{}) *MockRepository_Get_Call {
	return &MockRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockRepository_Get_Call) Run(run func(ctx context.Context, id int)) *MockRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockRepository_Get_Call) Return(_a0 *OTP, _a1 error) *MockRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Get_Call) RunAndReturn(run func(context.Context, int) (*OTP, error)) *MockRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) Save(_a0 context.Context, _a1 *OTP) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *OTP) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *OTP
func (_e *MockRepository_Expecter) Save(_a0 interface{}, _a1 interface{}) *MockRepository_Save_Call {
	return &MockRepository_Save_Call{Call: _e.mock.On("Save", _a0, _a1)}
}

func (_c *MockRepository_Save_Call) Run(run func(_a0 context.Context, _a1 *OTP)) *MockRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*OTP))
	})
	return _c
}

func (_c *MockRepository_Save_Call) Return(_a0 error) *MockRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Save_Call) RunAndReturn(run func(context.Context, *OTP) error) *MockRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, otp
func (_m *MockRepository) Update(ctx context.Context, otp *OTP) error {
	ret := _m.Called(ctx, otp)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *OTP) error); ok {
		r0 = rf(ctx, otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - otp *OTP
func (_e *MockRepository_Expecter) Update(ctx interface{}, otp interface{}) *MockRepository_Update_Call {
	return &MockRepository_Update_Call{Call: _e.mock.On("Update", ctx, otp)}
}

func (_c *MockRepository_Update_Call) Run(run func(ctx context.Context, otp *OTP)) *MockRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*OTP))
	})
	return _c
}

func (_c *MockRepository_Update_Call) Return(_a0 error) *MockRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Update_Call) RunAndReturn(run func(context.Context, *OTP) error) *MockRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
