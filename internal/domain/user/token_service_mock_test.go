// Code generated by mockery v2.20.0. DO NOT EDIT.

package user

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockTokenService is an autogenerated mock type for the TokenService type
type MockTokenService struct {
	mock.Mock
}

type MockTokenService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenService) EXPECT() *MockTokenService_Expecter {
	return &MockTokenService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: user, duration
func (_m *MockTokenService) Create(user *User, duration time.Duration) (*Token, error) {
	ret := _m.Called(user, duration)

	var r0 *Token
	var r1 error
	if rf, ok := ret.Get(0).(func(*User, time.Duration) (*Token, error)); ok {
		return rf(user, duration)
	}
	if rf, ok := ret.Get(0).(func(*User, time.Duration) *Token); ok {
		r0 = rf(user, duration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Token)
		}
	}

	if rf, ok := ret.Get(1).(func(*User, time.Duration) error); ok {
		r1 = rf(user, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTokenService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - user *User
//   - duration time.Duration
func (_e *MockTokenService_Expecter) Create(user interface{}, duration interface{}) *MockTokenService_Create_Call {
	return &MockTokenService_Create_Call{Call: _e.mock.On("Create", user, duration)}
}

func (_c *MockTokenService_Create_Call) Run(run func(user *User, duration time.Duration)) *MockTokenService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*User), args[1].(time.Duration))
	})
	return _c
}

func (_c *MockTokenService_Create_Call) Return(_a0 *Token, _a1 error) *MockTokenService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenService_Create_Call) RunAndReturn(run func(*User, time.Duration) (*Token, error)) *MockTokenService_Create_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockTokenService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTokenService creates a new instance of MockTokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTokenService(t mockConstructorTestingTNewMockTokenService) *MockTokenService {
	mock := &MockTokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
