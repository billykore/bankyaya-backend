// Code generated by mockery v2.53.3. DO NOT EDIT.

package intrabank

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockNotifier is an autogenerated mock type for the Notifier type
type MockNotifier struct {
	mock.Mock
}

type MockNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotifier) EXPECT() *MockNotifier_Expecter {
	return &MockNotifier_Expecter{mock: &_m.Mock}
}

// Notify provides a mock function with given fields: ctx, notification
func (_m *MockNotifier) Notify(ctx context.Context, notification *Notification) error {
	ret := _m.Called(ctx, notification)

	if len(ret) == 0 {
		panic("no return value specified for Notify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Notification) error); ok {
		r0 = rf(ctx, notification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotifier_Notify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notify'
type MockNotifier_Notify_Call struct {
	*mock.Call
}

// Notify is a helper method to define mock.On call
//   - ctx context.Context
//   - notification *Notification
func (_e *MockNotifier_Expecter) Notify(ctx interface{}, notification interface{}) *MockNotifier_Notify_Call {
	return &MockNotifier_Notify_Call{Call: _e.mock.On("Notify", ctx, notification)}
}

func (_c *MockNotifier_Notify_Call) Run(run func(ctx context.Context, notification *Notification)) *MockNotifier_Notify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Notification))
	})
	return _c
}

func (_c *MockNotifier_Notify_Call) Return(_a0 error) *MockNotifier_Notify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotifier_Notify_Call) RunAndReturn(run func(context.Context, *Notification) error) *MockNotifier_Notify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotifier creates a new instance of MockNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotifier {
	mock := &MockNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
