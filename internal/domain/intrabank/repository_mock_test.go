// Code generated by mockery v2.53.3. DO NOT EDIT.

package intrabank

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// GetSequence provides a mock function with given fields: ctx, sequenceNumber
func (_m *MockRepository) GetSequence(ctx context.Context, sequenceNumber string) (*Sequence, error) {
	ret := _m.Called(ctx, sequenceNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetSequence")
	}

	var r0 *Sequence
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Sequence, error)); ok {
		return rf(ctx, sequenceNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Sequence); ok {
		r0 = rf(ctx, sequenceNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Sequence)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sequenceNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetSequence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSequence'
type MockRepository_GetSequence_Call struct {
	*mock.Call
}

// GetSequence is a helper method to define mock.On call
//   - ctx context.Context
//   - sequenceNumber string
func (_e *MockRepository_Expecter) GetSequence(ctx interface{}, sequenceNumber interface{}) *MockRepository_GetSequence_Call {
	return &MockRepository_GetSequence_Call{Call: _e.mock.On("GetSequence", ctx, sequenceNumber)}
}

func (_c *MockRepository_GetSequence_Call) Run(run func(ctx context.Context, sequenceNumber string)) *MockRepository_GetSequence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_GetSequence_Call) Return(_a0 *Sequence, _a1 error) *MockRepository_GetSequence_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetSequence_Call) RunAndReturn(run func(context.Context, string) (*Sequence, error)) *MockRepository_GetSequence_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionLimit provides a mock function with given fields: ctx
func (_m *MockRepository) GetTransactionLimit(ctx context.Context) (*Limits, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionLimit")
	}

	var r0 *Limits
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*Limits, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *Limits); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Limits)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetTransactionLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionLimit'
type MockRepository_GetTransactionLimit_Call struct {
	*mock.Call
}

// GetTransactionLimit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) GetTransactionLimit(ctx interface{}) *MockRepository_GetTransactionLimit_Call {
	return &MockRepository_GetTransactionLimit_Call{Call: _e.mock.On("GetTransactionLimit", ctx)}
}

func (_c *MockRepository_GetTransactionLimit_Call) Run(run func(ctx context.Context)) *MockRepository_GetTransactionLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepository_GetTransactionLimit_Call) Return(_a0 *Limits, _a1 error) *MockRepository_GetTransactionLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetTransactionLimit_Call) RunAndReturn(run func(context.Context) (*Limits, error)) *MockRepository_GetTransactionLimit_Call {
	_c.Call.Return(run)
	return _c
}

// InsertSequence provides a mock function with given fields: ctx, seq
func (_m *MockRepository) InsertSequence(ctx context.Context, seq *Sequence) error {
	ret := _m.Called(ctx, seq)

	if len(ret) == 0 {
		panic("no return value specified for InsertSequence")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Sequence) error); ok {
		r0 = rf(ctx, seq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_InsertSequence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertSequence'
type MockRepository_InsertSequence_Call struct {
	*mock.Call
}

// InsertSequence is a helper method to define mock.On call
//   - ctx context.Context
//   - seq *Sequence
func (_e *MockRepository_Expecter) InsertSequence(ctx interface{}, seq interface{}) *MockRepository_InsertSequence_Call {
	return &MockRepository_InsertSequence_Call{Call: _e.mock.On("InsertSequence", ctx, seq)}
}

func (_c *MockRepository_InsertSequence_Call) Run(run func(ctx context.Context, seq *Sequence)) *MockRepository_InsertSequence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Sequence))
	})
	return _c
}

func (_c *MockRepository_InsertSequence_Call) Return(_a0 error) *MockRepository_InsertSequence_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_InsertSequence_Call) RunAndReturn(run func(context.Context, *Sequence) error) *MockRepository_InsertSequence_Call {
	_c.Call.Return(run)
	return _c
}

// InsertTransaction provides a mock function with given fields: ctx, transaction
func (_m *MockRepository) InsertTransaction(ctx context.Context, transaction *Transaction) error {
	ret := _m.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for InsertTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Transaction) error); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_InsertTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertTransaction'
type MockRepository_InsertTransaction_Call struct {
	*mock.Call
}

// InsertTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - transaction *Transaction
func (_e *MockRepository_Expecter) InsertTransaction(ctx interface{}, transaction interface{}) *MockRepository_InsertTransaction_Call {
	return &MockRepository_InsertTransaction_Call{Call: _e.mock.On("InsertTransaction", ctx, transaction)}
}

func (_c *MockRepository_InsertTransaction_Call) Run(run func(ctx context.Context, transaction *Transaction)) *MockRepository_InsertTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Transaction))
	})
	return _c
}

func (_c *MockRepository_InsertTransaction_Call) Return(_a0 error) *MockRepository_InsertTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_InsertTransaction_Call) RunAndReturn(run func(context.Context, *Transaction) error) *MockRepository_InsertTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
