// Code generated by mockery v2.20.0. DO NOT EDIT.

package intrabankmock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	intrabank "go.bankyaya.org/app/backend/internal/domain/intrabank"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// GetSequence provides a mock function with given fields: ctx, sequenceNumber
func (_m *Repository) GetSequence(ctx context.Context, sequenceNumber string) (*intrabank.Sequence, error) {
	ret := _m.Called(ctx, sequenceNumber)

	var r0 *intrabank.Sequence
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*intrabank.Sequence, error)); ok {
		return rf(ctx, sequenceNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *intrabank.Sequence); ok {
		r0 = rf(ctx, sequenceNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*intrabank.Sequence)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sequenceNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetSequence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSequence'
type Repository_GetSequence_Call struct {
	*mock.Call
}

// GetSequence is a helper method to define mock.On call
//   - ctx context.Context
//   - sequenceNumber string
func (_e *Repository_Expecter) GetSequence(ctx interface{}, sequenceNumber interface{}) *Repository_GetSequence_Call {
	return &Repository_GetSequence_Call{Call: _e.mock.On("GetSequence", ctx, sequenceNumber)}
}

func (_c *Repository_GetSequence_Call) Run(run func(ctx context.Context, sequenceNumber string)) *Repository_GetSequence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_GetSequence_Call) Return(_a0 *intrabank.Sequence, _a1 error) *Repository_GetSequence_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetSequence_Call) RunAndReturn(run func(context.Context, string) (*intrabank.Sequence, error)) *Repository_GetSequence_Call {
	_c.Call.Return(run)
	return _c
}

// InsertSequence provides a mock function with given fields: ctx, seq
func (_m *Repository) InsertSequence(ctx context.Context, seq *intrabank.Sequence) error {
	ret := _m.Called(ctx, seq)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *intrabank.Sequence) error); ok {
		r0 = rf(ctx, seq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_InsertSequence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertSequence'
type Repository_InsertSequence_Call struct {
	*mock.Call
}

// InsertSequence is a helper method to define mock.On call
//   - ctx context.Context
//   - seq *intrabank.Sequence
func (_e *Repository_Expecter) InsertSequence(ctx interface{}, seq interface{}) *Repository_InsertSequence_Call {
	return &Repository_InsertSequence_Call{Call: _e.mock.On("InsertSequence", ctx, seq)}
}

func (_c *Repository_InsertSequence_Call) Run(run func(ctx context.Context, seq *intrabank.Sequence)) *Repository_InsertSequence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*intrabank.Sequence))
	})
	return _c
}

func (_c *Repository_InsertSequence_Call) Return(_a0 error) *Repository_InsertSequence_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_InsertSequence_Call) RunAndReturn(run func(context.Context, *intrabank.Sequence) error) *Repository_InsertSequence_Call {
	_c.Call.Return(run)
	return _c
}

// InsertTransaction provides a mock function with given fields: ctx, transaction
func (_m *Repository) InsertTransaction(ctx context.Context, transaction *intrabank.Transaction) error {
	ret := _m.Called(ctx, transaction)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *intrabank.Transaction) error); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_InsertTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertTransaction'
type Repository_InsertTransaction_Call struct {
	*mock.Call
}

// InsertTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - transaction *intrabank.Transaction
func (_e *Repository_Expecter) InsertTransaction(ctx interface{}, transaction interface{}) *Repository_InsertTransaction_Call {
	return &Repository_InsertTransaction_Call{Call: _e.mock.On("InsertTransaction", ctx, transaction)}
}

func (_c *Repository_InsertTransaction_Call) Run(run func(ctx context.Context, transaction *intrabank.Transaction)) *Repository_InsertTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*intrabank.Transaction))
	})
	return _c
}

func (_c *Repository_InsertTransaction_Call) Return(_a0 error) *Repository_InsertTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_InsertTransaction_Call) RunAndReturn(run func(context.Context, *intrabank.Transaction) error) *Repository_InsertTransaction_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
