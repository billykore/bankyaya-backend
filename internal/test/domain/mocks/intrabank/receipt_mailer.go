// Code generated by mockery v2.20.0. DO NOT EDIT.

package intrabankmock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	intrabank "go.bankyaya.org/app/backend/internal/domain/intrabank"
)

// ReceiptMailer is an autogenerated mock type for the ReceiptMailer type
type ReceiptMailer struct {
	mock.Mock
}

type ReceiptMailer_Expecter struct {
	mock *mock.Mock
}

func (_m *ReceiptMailer) EXPECT() *ReceiptMailer_Expecter {
	return &ReceiptMailer_Expecter{mock: &_m.Mock}
}

// SendReceipt provides a mock function with given fields: ctx, data
func (_m *ReceiptMailer) SendReceipt(ctx context.Context, data *intrabank.EmailData) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *intrabank.EmailData) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReceiptMailer_SendReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendReceipt'
type ReceiptMailer_SendReceipt_Call struct {
	*mock.Call
}

// SendReceipt is a helper method to define mock.On call
//   - ctx context.Context
//   - data *intrabank.EmailData
func (_e *ReceiptMailer_Expecter) SendReceipt(ctx interface{}, data interface{}) *ReceiptMailer_SendReceipt_Call {
	return &ReceiptMailer_SendReceipt_Call{Call: _e.mock.On("SendReceipt", ctx, data)}
}

func (_c *ReceiptMailer_SendReceipt_Call) Run(run func(ctx context.Context, data *intrabank.EmailData)) *ReceiptMailer_SendReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*intrabank.EmailData))
	})
	return _c
}

func (_c *ReceiptMailer_SendReceipt_Call) Return(_a0 error) *ReceiptMailer_SendReceipt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReceiptMailer_SendReceipt_Call) RunAndReturn(run func(context.Context, *intrabank.EmailData) error) *ReceiptMailer_SendReceipt_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewReceiptMailer interface {
	mock.TestingT
	Cleanup(func())
}

// NewReceiptMailer creates a new instance of ReceiptMailer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReceiptMailer(t mockConstructorTestingTNewReceiptMailer) *ReceiptMailer {
	mock := &ReceiptMailer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
