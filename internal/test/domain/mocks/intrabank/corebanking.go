// Code generated by mockery v2.20.0. DO NOT EDIT.

package intrabankmock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	intrabank "go.bankyaya.org/app/backend/internal/domain/intrabank"
)

// CoreBanking is an autogenerated mock type for the CoreBanking type
type CoreBanking struct {
	mock.Mock
}

type CoreBanking_Expecter struct {
	mock *mock.Mock
}

func (_m *CoreBanking) EXPECT() *CoreBanking_Expecter {
	return &CoreBanking_Expecter{mock: &_m.Mock}
}

// GetAccountDetails provides a mock function with given fields: ctx, accountNumber
func (_m *CoreBanking) GetAccountDetails(ctx context.Context, accountNumber string) (*intrabank.Account, error) {
	ret := _m.Called(ctx, accountNumber)

	var r0 *intrabank.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*intrabank.Account, error)); ok {
		return rf(ctx, accountNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *intrabank.Account); ok {
		r0 = rf(ctx, accountNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*intrabank.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accountNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreBanking_GetAccountDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountDetails'
type CoreBanking_GetAccountDetails_Call struct {
	*mock.Call
}

// GetAccountDetails is a helper method to define mock.On call
//   - ctx context.Context
//   - accountNumber string
func (_e *CoreBanking_Expecter) GetAccountDetails(ctx interface{}, accountNumber interface{}) *CoreBanking_GetAccountDetails_Call {
	return &CoreBanking_GetAccountDetails_Call{Call: _e.mock.On("GetAccountDetails", ctx, accountNumber)}
}

func (_c *CoreBanking_GetAccountDetails_Call) Run(run func(ctx context.Context, accountNumber string)) *CoreBanking_GetAccountDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CoreBanking_GetAccountDetails_Call) Return(_a0 *intrabank.Account, _a1 error) *CoreBanking_GetAccountDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreBanking_GetAccountDetails_Call) RunAndReturn(run func(context.Context, string) (*intrabank.Account, error)) *CoreBanking_GetAccountDetails_Call {
	_c.Call.Return(run)
	return _c
}

// GetCoreStatus provides a mock function with given fields: ctx
func (_m *CoreBanking) GetCoreStatus(ctx context.Context) (*intrabank.CoreStatus, error) {
	ret := _m.Called(ctx)

	var r0 *intrabank.CoreStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*intrabank.CoreStatus, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *intrabank.CoreStatus); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*intrabank.CoreStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreBanking_GetCoreStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCoreStatus'
type CoreBanking_GetCoreStatus_Call struct {
	*mock.Call
}

// GetCoreStatus is a helper method to define mock.On call
//   - ctx context.Context
func (_e *CoreBanking_Expecter) GetCoreStatus(ctx interface{}) *CoreBanking_GetCoreStatus_Call {
	return &CoreBanking_GetCoreStatus_Call{Call: _e.mock.On("GetCoreStatus", ctx)}
}

func (_c *CoreBanking_GetCoreStatus_Call) Run(run func(ctx context.Context)) *CoreBanking_GetCoreStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *CoreBanking_GetCoreStatus_Call) Return(_a0 *intrabank.CoreStatus, _a1 error) *CoreBanking_GetCoreStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreBanking_GetCoreStatus_Call) RunAndReturn(run func(context.Context) (*intrabank.CoreStatus, error)) *CoreBanking_GetCoreStatus_Call {
	_c.Call.Return(run)
	return _c
}

// PerformOverbooking provides a mock function with given fields: ctx, req
func (_m *CoreBanking) PerformOverbooking(ctx context.Context, req *intrabank.OverbookingInput) (*intrabank.OverbookingResult, error) {
	ret := _m.Called(ctx, req)

	var r0 *intrabank.OverbookingResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *intrabank.OverbookingInput) (*intrabank.OverbookingResult, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *intrabank.OverbookingInput) *intrabank.OverbookingResult); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*intrabank.OverbookingResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *intrabank.OverbookingInput) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoreBanking_PerformOverbooking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PerformOverbooking'
type CoreBanking_PerformOverbooking_Call struct {
	*mock.Call
}

// PerformOverbooking is a helper method to define mock.On call
//   - ctx context.Context
//   - req *intrabank.OverbookingInput
func (_e *CoreBanking_Expecter) PerformOverbooking(ctx interface{}, req interface{}) *CoreBanking_PerformOverbooking_Call {
	return &CoreBanking_PerformOverbooking_Call{Call: _e.mock.On("PerformOverbooking", ctx, req)}
}

func (_c *CoreBanking_PerformOverbooking_Call) Run(run func(ctx context.Context, req *intrabank.OverbookingInput)) *CoreBanking_PerformOverbooking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*intrabank.OverbookingInput))
	})
	return _c
}

func (_c *CoreBanking_PerformOverbooking_Call) Return(_a0 *intrabank.OverbookingResult, _a1 error) *CoreBanking_PerformOverbooking_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoreBanking_PerformOverbooking_Call) RunAndReturn(run func(context.Context, *intrabank.OverbookingInput) (*intrabank.OverbookingResult, error)) *CoreBanking_PerformOverbooking_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCoreBanking interface {
	mock.TestingT
	Cleanup(func())
}

// NewCoreBanking creates a new instance of CoreBanking. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCoreBanking(t mockConstructorTestingTNewCoreBanking) *CoreBanking {
	mock := &CoreBanking{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
