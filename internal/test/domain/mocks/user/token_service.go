// Code generated by mockery v2.20.0. DO NOT EDIT.

package usermock

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	user "go.bankyaya.org/app/backend/internal/domain/user"
)

// TokenService is an autogenerated mock type for the TokenService type
type TokenService struct {
	mock.Mock
}

type TokenService_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenService) EXPECT() *TokenService_Expecter {
	return &TokenService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, duration
func (_m *TokenService) Create(_a0 *user.User, duration time.Duration) (*user.Token, error) {
	ret := _m.Called(_a0, duration)

	var r0 *user.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(*user.User, time.Duration) (*user.Token, error)); ok {
		return rf(_a0, duration)
	}
	if rf, ok := ret.Get(0).(func(*user.User, time.Duration) *user.Token); ok {
		r0 = rf(_a0, duration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(*user.User, time.Duration) error); ok {
		r1 = rf(_a0, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type TokenService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 *user.User
//   - duration time.Duration
func (_e *TokenService_Expecter) Create(_a0 interface{}, duration interface{}) *TokenService_Create_Call {
	return &TokenService_Create_Call{Call: _e.mock.On("Create", _a0, duration)}
}

func (_c *TokenService_Create_Call) Run(run func(_a0 *user.User, duration time.Duration)) *TokenService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*user.User), args[1].(time.Duration))
	})
	return _c
}

func (_c *TokenService_Create_Call) Return(_a0 *user.Token, _a1 error) *TokenService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenService_Create_Call) RunAndReturn(run func(*user.User, time.Duration) (*user.Token, error)) *TokenService_Create_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewTokenService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTokenService creates a new instance of TokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTokenService(t mockConstructorTestingTNewTokenService) *TokenService {
	mock := &TokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
