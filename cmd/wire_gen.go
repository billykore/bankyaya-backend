// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/labstack/echo/v4"
	corebanking2 "go.bankyaya.org/app/backend/internal/adapter/corebanking"
	"go.bankyaya.org/app/backend/internal/adapter/email"
	"go.bankyaya.org/app/backend/internal/adapter/http/handler"
	"go.bankyaya.org/app/backend/internal/adapter/http/server"
	"go.bankyaya.org/app/backend/internal/adapter/notification"
	"go.bankyaya.org/app/backend/internal/adapter/otp"
	"go.bankyaya.org/app/backend/internal/adapter/password"
	"go.bankyaya.org/app/backend/internal/adapter/sequence"
	"go.bankyaya.org/app/backend/internal/adapter/storage/repo"
	"go.bankyaya.org/app/backend/internal/adapter/token"
	"go.bankyaya.org/app/backend/internal/domain/intrabank"
	otp2 "go.bankyaya.org/app/backend/internal/domain/otp"
	"go.bankyaya.org/app/backend/internal/domain/user"
	"go.bankyaya.org/app/backend/internal/pkg/config"
	"go.bankyaya.org/app/backend/internal/pkg/corebanking"
	"go.bankyaya.org/app/backend/internal/pkg/db/postgres"
	"go.bankyaya.org/app/backend/internal/pkg/email/mailtrap"
	"go.bankyaya.org/app/backend/internal/pkg/httpclient"
	"go.bankyaya.org/app/backend/internal/pkg/logger"
	"go.bankyaya.org/app/backend/internal/pkg/notification/firebase"
	"go.bankyaya.org/app/backend/internal/pkg/validation"
)

import (
	_ "github.com/joho/godotenv/autoload"
	_ "go.bankyaya.org/app/backend/cmd/swagger/docs"
)

// Injectors from wire.go:

func initApp(cfg *config.Configs) *app {
	loggerLogger := logger.New()
	echoEcho := echo.New()
	db := postgres.New(cfg)
	intrabankRepo := repo.NewIntrabankRepo(db)
	client := httpclient.New()
	corebankingClient := corebanking.NewClient(cfg, client)
	intrabankCoreBanking := corebanking2.NewIntrabankCoreBanking(corebankingClient)
	uuid := sequence.New()
	mailtrapClient := mailtrap.NewClient(cfg)
	intrabankEmail := email.NewTransferEmail(loggerLogger, mailtrapClient)
	firebaseClient := firebase.New()
	intrabankNotification := notification.NewIntrabankNotification(firebaseClient)
	service := intrabank.NewService(loggerLogger, intrabankRepo, intrabankCoreBanking, uuid, intrabankEmail, intrabankNotification)
	handlerIntrabank := handler.NewIntrabankHandler(service)
	userRepo := repo.NewUserRepo(db)
	bcryptHasher := password.NewBcryptHasher(loggerLogger)
	jwt := token.NewJWT(cfg)
	userService := user.NewService(loggerLogger, userRepo, bcryptHasher, jwt)
	userHandler := handler.NewUserHandler(userService)
	validator := validation.New()
	otpRepo := repo.NewOTPRepo(db)
	otpOTP := otp.NewOTP()
	otpEmail := email.NewOTPEmail(loggerLogger, mailtrapClient)
	otpService := otp2.NewService(loggerLogger, otpRepo, otpOTP, otpEmail)
	otpHandler := handler.NewOTPHandler(validator, otpService)
	router := server.NewRouter(cfg, loggerLogger, echoEcho, handlerIntrabank, userHandler, otpHandler)
	serverServer := server.New(router)
	mainApp := newApp(serverServer)
	return mainApp
}
