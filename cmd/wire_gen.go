// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/labstack/echo/v4"
	"go.bankyaya.org/app/backend/internal/adapter/auth"
	corebanking2 "go.bankyaya.org/app/backend/internal/adapter/corebanking"
	"go.bankyaya.org/app/backend/internal/adapter/email"
	"go.bankyaya.org/app/backend/internal/adapter/http/handler"
	"go.bankyaya.org/app/backend/internal/adapter/http/server"
	"go.bankyaya.org/app/backend/internal/adapter/messaging"
	qris2 "go.bankyaya.org/app/backend/internal/adapter/qris"
	"go.bankyaya.org/app/backend/internal/adapter/sequence"
	"go.bankyaya.org/app/backend/internal/adapter/storage/repo"
	"go.bankyaya.org/app/backend/internal/core/service"
	"go.bankyaya.org/app/backend/internal/pkg/config"
	"go.bankyaya.org/app/backend/internal/pkg/corebanking"
	"go.bankyaya.org/app/backend/internal/pkg/db/postgres"
	"go.bankyaya.org/app/backend/internal/pkg/email/mailtrap"
	"go.bankyaya.org/app/backend/internal/pkg/httpclient"
	"go.bankyaya.org/app/backend/internal/pkg/logger"
	"go.bankyaya.org/app/backend/internal/pkg/messaging/rabbitmq"
	"go.bankyaya.org/app/backend/internal/pkg/qris"
	"go.bankyaya.org/app/backend/internal/pkg/validation"
)

import (
	_ "github.com/joho/godotenv/autoload"
	_ "go.bankyaya.org/app/backend/cmd/swagger/docs"
)

// Injectors from wire.go:

func initApp(cfg *config.Config) *app {
	loggerLogger := logger.New()
	echoEcho := echo.New()
	db := postgres.New(cfg)
	transferRepo := repo.NewTransferRepo(db)
	client := httpclient.New()
	corebankingClient := corebanking.NewClient(cfg, client)
	coreBanking := corebanking2.New(corebankingClient)
	sequenceSequence := sequence.New()
	mailtrapClient := mailtrap.NewClient(cfg)
	transferEmail := email.NewTransferEmail(loggerLogger, mailtrapClient)
	transfer := service.NewTransfer(loggerLogger, transferRepo, coreBanking, sequenceSequence, transferEmail)
	handlerTransfer := handler.NewTransfer(transfer)
	qrisClient := qris.NewClient(cfg, client)
	qrisQRIS := qris2.NewQRIS(qrisClient)
	qrisEmail := email.NewQRISEmail(loggerLogger, mailtrapClient)
	serviceQRIS := service.NewQRIS(loggerLogger, coreBanking, qrisQRIS, qrisEmail)
	handlerQRIS := handler.NewQRIS(serviceQRIS)
	userRepo := repo.NewUserRepo(db)
	bcryptHasher := auth.NewBcryptHasher(loggerLogger)
	jwt := auth.NewJWT(loggerLogger)
	user := service.NewUser(loggerLogger, userRepo, bcryptHasher, jwt)
	userHandler := handler.NewUserHandler(user)
	validator := validation.New()
	schedulerRepo := repo.NewSchedulerRepo(db)
	connection := rabbitmq.NewConnection(cfg)
	schedulerPublisher := messaging.NewSchedulerPublisher(cfg, loggerLogger, connection)
	scheduler := service.NewScheduler(loggerLogger, schedulerRepo, schedulerPublisher)
	handlerScheduler := handler.NewScheduler(validator, scheduler)
	router := server.NewRouter(cfg, loggerLogger, echoEcho, handlerTransfer, handlerQRIS, userHandler, handlerScheduler)
	serverServer := server.New(router)
	transferConsumer := messaging.NewTransferConsumer(cfg, loggerLogger, connection, transfer)
	listener := messaging.NewListener(loggerLogger, transferConsumer)
	mainApp := newApp(serverServer, listener)
	return mainApp
}
