// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/labstack/echo/v4"
	qris3 "go.bankyaya.org/app/backend/domain/qris"
	"go.bankyaya.org/app/backend/domain/transfer"
	corebanking2 "go.bankyaya.org/app/backend/infra/api/corebanking"
	qris2 "go.bankyaya.org/app/backend/infra/api/qris"
	"go.bankyaya.org/app/backend/infra/email/mailer"
	"go.bankyaya.org/app/backend/infra/http/handler"
	"go.bankyaya.org/app/backend/infra/http/server"
	"go.bankyaya.org/app/backend/infra/storage/repo"
	"go.bankyaya.org/app/backend/pkg/config"
	"go.bankyaya.org/app/backend/pkg/corebanking"
	"go.bankyaya.org/app/backend/pkg/db/postgres"
	"go.bankyaya.org/app/backend/pkg/email/mailtrap"
	"go.bankyaya.org/app/backend/pkg/httpclient"
	"go.bankyaya.org/app/backend/pkg/logger"
	"go.bankyaya.org/app/backend/pkg/qris"
	"go.bankyaya.org/app/backend/pkg/validation"
)

import (
	_ "github.com/joho/godotenv/autoload"
	_ "go.bankyaya.org/app/backend/cmd/swagger/docs"
)

// Injectors from wire.go:

func initApp(cfg *config.Config) *app {
	loggerLogger := logger.New()
	echoEcho := echo.New()
	validator := validation.New()
	db := postgres.New(cfg)
	transferRepo := repo.NewTransferRepo(db)
	client := httpclient.New()
	corebankingClient := corebanking.NewClient(cfg, client)
	corebankingTransfer := corebanking2.NewTransfer(corebankingClient)
	mailtrapClient := mailtrap.NewClient(cfg)
	transferEmail := mailer.NewTransferEmail(loggerLogger, mailtrapClient)
	service := transfer.NewService(loggerLogger, transferRepo, corebankingTransfer, transferEmail)
	transferHandler := handler.NewTransferHandler(validator, service)
	corebankingQRIS := corebanking2.NewQRIS(corebankingClient)
	qrisClient := qris.NewClient(cfg, client)
	qrisQRIS := qris2.NewQRIS(qrisClient)
	qrisService := qris3.NewService(loggerLogger, corebankingQRIS, qrisQRIS)
	qrisHandler := handler.NewQRISHandler(validator, qrisService)
	router := server.NewRouter(cfg, loggerLogger, echoEcho, transferHandler, qrisHandler)
	serverServer := server.New(router)
	mainApp := newApp(serverServer)
	return mainApp
}
